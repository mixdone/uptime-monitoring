// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mixdone/uptime-monitoring/internal/repository (interfaces: MonitorsRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/mixdone/uptime-monitoring/internal/models"
)

// MockMonitorsRepository is a mock of MonitorsRepository interface.
type MockMonitorsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorsRepositoryMockRecorder
}

// MockMonitorsRepositoryMockRecorder is the mock recorder for MockMonitorsRepository.
type MockMonitorsRepositoryMockRecorder struct {
	mock *MockMonitorsRepository
}

// NewMockMonitorsRepository creates a new mock instance.
func NewMockMonitorsRepository(ctrl *gomock.Controller) *MockMonitorsRepository {
	mock := &MockMonitorsRepository{ctrl: ctrl}
	mock.recorder = &MockMonitorsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitorsRepository) EXPECT() *MockMonitorsRepositoryMockRecorder {
	return m.recorder
}

// CreateMonitor mocks base method.
func (m *MockMonitorsRepository) CreateMonitor(arg0 context.Context, arg1 models.Monitor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonitor", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonitor indicates an expected call of CreateMonitor.
func (mr *MockMonitorsRepositoryMockRecorder) CreateMonitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitor", reflect.TypeOf((*MockMonitorsRepository)(nil).CreateMonitor), arg0, arg1)
}

// DeleteMonitor mocks base method.
func (m *MockMonitorsRepository) DeleteMonitor(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonitor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMonitor indicates an expected call of DeleteMonitor.
func (mr *MockMonitorsRepositoryMockRecorder) DeleteMonitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitor", reflect.TypeOf((*MockMonitorsRepository)(nil).DeleteMonitor), arg0, arg1)
}

// GetAllActiveMonitors mocks base method.
func (m *MockMonitorsRepository) GetAllActiveMonitors(arg0 context.Context) ([]models.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveMonitors", arg0)
	ret0, _ := ret[0].([]models.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveMonitors indicates an expected call of GetAllActiveMonitors.
func (mr *MockMonitorsRepositoryMockRecorder) GetAllActiveMonitors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveMonitors", reflect.TypeOf((*MockMonitorsRepository)(nil).GetAllActiveMonitors), arg0)
}

// GetAllUserMonitors mocks base method.
func (m *MockMonitorsRepository) GetAllUserMonitors(arg0 context.Context, arg1 int64) ([]models.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserMonitors", arg0, arg1)
	ret0, _ := ret[0].([]models.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserMonitors indicates an expected call of GetAllUserMonitors.
func (mr *MockMonitorsRepositoryMockRecorder) GetAllUserMonitors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserMonitors", reflect.TypeOf((*MockMonitorsRepository)(nil).GetAllUserMonitors), arg0, arg1)
}

// GetMonitor mocks base method.
func (m *MockMonitorsRepository) GetMonitor(arg0 context.Context, arg1 int64) (*models.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitor", arg0, arg1)
	ret0, _ := ret[0].(*models.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitor indicates an expected call of GetMonitor.
func (mr *MockMonitorsRepositoryMockRecorder) GetMonitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitor", reflect.TypeOf((*MockMonitorsRepository)(nil).GetMonitor), arg0, arg1)
}

// UpdateLastCheckedAt mocks base method.
func (m *MockMonitorsRepository) UpdateLastCheckedAt(arg0 context.Context, arg1 int64, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastCheckedAt", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastCheckedAt indicates an expected call of UpdateLastCheckedAt.
func (mr *MockMonitorsRepositoryMockRecorder) UpdateLastCheckedAt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastCheckedAt", reflect.TypeOf((*MockMonitorsRepository)(nil).UpdateLastCheckedAt), arg0, arg1, arg2)
}

// UpdateMonitor mocks base method.
func (m *MockMonitorsRepository) UpdateMonitor(arg0 context.Context, arg1 models.Monitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMonitor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMonitor indicates an expected call of UpdateMonitor.
func (mr *MockMonitorsRepositoryMockRecorder) UpdateMonitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitor", reflect.TypeOf((*MockMonitorsRepository)(nil).UpdateMonitor), arg0, arg1)
}
